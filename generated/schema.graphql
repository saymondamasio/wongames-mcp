"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type DeleteMutationResponse {
  documentId: ID!
}

enum PublicationStatus {
  DRAFT
  PUBLISHED
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  nei: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  nei: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  nei: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  nei: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input LongFilterInput {
  and: [Long]
  or: [Long]
  not: LongFilterInput
  eq: Long
  eqi: Long
  ne: Long
  nei: Long
  startsWith: Long
  endsWith: Long
  contains: Long
  notContains: Long
  containsi: Long
  notContainsi: Long
  gt: Long
  gte: Long
  lt: Long
  lte: Long
  null: Boolean
  notNull: Boolean
  in: [Long]
  notIn: [Long]
  between: [Long]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  nei: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateFilterInput {
  and: [Date]
  or: [Date]
  not: DateFilterInput
  eq: Date
  eqi: Date
  ne: Date
  nei: Date
  startsWith: Date
  endsWith: Date
  contains: Date
  notContains: Date
  containsi: Date
  notContainsi: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  null: Boolean
  notNull: Boolean
  in: [Date]
  notIn: [Date]
  between: [Date]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  nei: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  nei: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentPageSectionInput {
  id: ID
  title: String
  highlight: ComponentPageHighlightInput
}

type ComponentPageSection {
  id: ID!
  title: String
  highlight: ComponentPageHighlight
}

enum ENUM_COMPONENTPAGERIBBON_COLOR {
  primary
  secondary
}

enum ENUM_COMPONENTPAGERIBBON_SIZE {
  small
  normal
}

input ComponentPageRibbonFiltersInput {
  text: StringFilterInput
  color: StringFilterInput
  size: StringFilterInput
  and: [ComponentPageRibbonFiltersInput]
  or: [ComponentPageRibbonFiltersInput]
  not: ComponentPageRibbonFiltersInput
}

input ComponentPageRibbonInput {
  id: ID
  text: String
  color: ENUM_COMPONENTPAGERIBBON_COLOR
  size: ENUM_COMPONENTPAGERIBBON_SIZE
}

type ComponentPageRibbon {
  id: ID!
  text: String
  color: ENUM_COMPONENTPAGERIBBON_COLOR
  size: ENUM_COMPONENTPAGERIBBON_SIZE
}

input ComponentPagePopularGamesInput {
  id: ID
  title: String
  highlight: ComponentPageHighlightInput
  games: [ID]
}

type ComponentPagePopularGames {
  id: ID!
  title: String
  highlight: ComponentPageHighlight
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
}

enum ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT {
  right
  left
}

input ComponentPageHighlightInput {
  id: ID
  title: String
  subtitle: String
  background: ID
  floatImage: ID
  buttonLabel: String
  buttonLink: String
  alignment: ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT
}

type ComponentPageHighlight {
  id: ID!
  title: String!
  subtitle: String!
  background: UploadFile!
  floatImage: UploadFile
  buttonLabel: String!
  buttonLink: String!
  alignment: ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT
}

input ComponentPageButtonFiltersInput {
  label: StringFilterInput
  link: StringFilterInput
  and: [ComponentPageButtonFiltersInput]
  or: [ComponentPageButtonFiltersInput]
  not: ComponentPageButtonFiltersInput
}

input ComponentPageButtonInput {
  id: ID
  label: String
  link: String
}

type ComponentPageButton {
  id: ID!
  label: String!
  link: String!
}

input UploadFileFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

type UploadFile {
  documentId: ID!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UploadFileEntityResponseCollection {
  nodes: [UploadFile!]!
  pageInfo: Pagination!
}

type UploadFileRelationResponseCollection {
  nodes: [UploadFile!]!
}

input I18NLocaleFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  documentId: ID!
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type I18NLocaleEntityResponseCollection {
  nodes: [I18NLocale!]!
  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  stages: ReviewWorkflowsWorkflowStageFiltersInput
  stageRequiredToPublish: ReviewWorkflowsWorkflowStageFiltersInput
  contentTypes: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ReviewWorkflowsWorkflowFiltersInput]
  or: [ReviewWorkflowsWorkflowFiltersInput]
  not: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowInput {
  name: String
  stages: [ID]
  stageRequiredToPublish: ID
  contentTypes: JSON
  publishedAt: DateTime
}

type ReviewWorkflowsWorkflow {
  documentId: ID!
  name: String!
  stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
  stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
  stageRequiredToPublish: ReviewWorkflowsWorkflowStage
  contentTypes: JSON!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflow!]!
  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowStageFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  color: StringFilterInput
  workflow: ReviewWorkflowsWorkflowFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ReviewWorkflowsWorkflowStageFiltersInput]
  or: [ReviewWorkflowsWorkflowStageFiltersInput]
  not: ReviewWorkflowsWorkflowStageFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
  name: String
  color: String
  workflow: ID
  publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStage {
  documentId: ID!
  name: String
  color: String
  workflow: ReviewWorkflowsWorkflow
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
  pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
}

input UsersPermissionsPermissionFiltersInput {
  documentId: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  documentId: ID!
  action: String!
  role: UsersPermissionsRole
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UsersPermissionsPermissionRelationResponseCollection {
  nodes: [UsersPermissionsPermission!]!
}

input UsersPermissionsRoleFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  publishedAt: DateTime
}

type UsersPermissionsRole {
  documentId: ID!
  name: String!
  description: String
  type: String
  permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
  users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UsersPermissionsRoleEntityResponseCollection {
  nodes: [UsersPermissionsRole!]!
  pageInfo: Pagination!
}

input UsersPermissionsUserFiltersInput {
  documentId: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  publishedAt: DateTime
  password: String
}

type UsersPermissionsUser {
  documentId: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
  nodes: [UsersPermissionsUser!]!
  pageInfo: Pagination!
}

type UsersPermissionsUserRelationResponseCollection {
  nodes: [UsersPermissionsUser!]!
}

input BannerFiltersInput {
  documentId: IDFilterInput
  title: StringFilterInput
  subtitle: StringFilterInput
  button: ComponentPageButtonFiltersInput
  ribbon: ComponentPageRibbonFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [BannerFiltersInput]
  or: [BannerFiltersInput]
  not: BannerFiltersInput
}

input BannerInput {
  image: ID
  title: String
  subtitle: String
  button: ComponentPageButtonInput
  ribbon: ComponentPageRibbonInput
  publishedAt: DateTime
}

type Banner {
  documentId: ID!
  image: UploadFile!
  title: String!
  subtitle: String!
  button: ComponentPageButton
  ribbon: ComponentPageRibbon
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type BannerEntityResponseCollection {
  nodes: [Banner!]!
  pageInfo: Pagination!
}

input CategoryFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [CategoryFiltersInput]
  or: [CategoryFiltersInput]
  not: CategoryFiltersInput
}

input CategoryInput {
  name: String
  slug: String
  games: [ID]
  publishedAt: DateTime
}

type Category {
  documentId: ID!
  name: String!
  slug: String!
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type CategoryEntityResponseCollection {
  nodes: [Category!]!
  pageInfo: Pagination!
}

type CategoryRelationResponseCollection {
  nodes: [Category!]!
}

input DeveloperFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DeveloperFiltersInput]
  or: [DeveloperFiltersInput]
  not: DeveloperFiltersInput
}

input DeveloperInput {
  name: String
  slug: String
  games: [ID]
  publishedAt: DateTime
}

type Developer {
  documentId: ID!
  name: String!
  slug: String!
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DeveloperEntityResponseCollection {
  nodes: [Developer!]!
  pageInfo: Pagination!
}

type DeveloperRelationResponseCollection {
  nodes: [Developer!]!
}

enum ENUM_GAME_RATING {
  BR0
  BR10
  BR12
  BR14
  BR16
  BR18
}

input GameFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  short_description: StringFilterInput
  description: StringFilterInput
  price: FloatFilterInput
  release_date: DateFilterInput
  rating: StringFilterInput
  categories: CategoryFiltersInput
  developers: DeveloperFiltersInput
  platforms: PlatformFiltersInput
  publisher: PublisherFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: GameFiltersInput
  and: [GameFiltersInput]
  or: [GameFiltersInput]
  not: GameFiltersInput
}

input GameInput {
  name: String
  slug: String
  short_description: String
  description: String
  price: Float
  release_date: Date
  rating: ENUM_GAME_RATING
  cover: ID
  gallery: [ID]
  categories: [ID]
  developers: [ID]
  platforms: [ID]
  publisher: ID
  publishedAt: DateTime
}

type Game {
  documentId: ID!
  name: String!
  slug: String!
  short_description: String!
  description: String
  price: Float!
  release_date: Date
  rating: ENUM_GAME_RATING
  cover: UploadFile
  gallery_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
  categories_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryRelationResponseCollection
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Category]!
  developers_connection(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DeveloperRelationResponseCollection
  developers(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Developer]!
  platforms_connection(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PlatformRelationResponseCollection
  platforms(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Platform]!
  publisher: Publisher
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  localizations(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
}

type GameEntityResponseCollection {
  nodes: [Game!]!
  pageInfo: Pagination!
}

type GameRelationResponseCollection {
  nodes: [Game!]!
}

input HomeInput {
  newGames: ComponentPageSectionInput
  upcomingGames: ComponentPageSectionInput
  freeGames: ComponentPageSectionInput
  popularGames: ComponentPagePopularGamesInput
  publishedAt: DateTime
}

type Home {
  documentId: ID!
  newGames: ComponentPageSection
  upcomingGames: ComponentPageSection
  freeGames: ComponentPageSection
  popularGames: ComponentPagePopularGames
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

input OrderFiltersInput {
  documentId: IDFilterInput
  user: UsersPermissionsUserFiltersInput
  games: GameFiltersInput
  amount_in_cents: LongFilterInput
  payment_intent_id: StringFilterInput
  card_brand: StringFilterInput
  card_last4: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [OrderFiltersInput]
  or: [OrderFiltersInput]
  not: OrderFiltersInput
}

input OrderInput {
  user: ID
  games: [ID]
  amount_in_cents: Long
  payment_intent_id: String
  card_brand: String
  card_last4: String
  publishedAt: DateTime
}

type Order {
  documentId: ID!
  user: UsersPermissionsUser
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  amount_in_cents: Long!
  payment_intent_id: String
  card_brand: String
  card_last4: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type OrderEntityResponseCollection {
  nodes: [Order!]!
  pageInfo: Pagination!
}

input PlatformFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PlatformFiltersInput]
  or: [PlatformFiltersInput]
  not: PlatformFiltersInput
}

input PlatformInput {
  name: String
  slug: String
  games: [ID]
  publishedAt: DateTime
}

type Platform {
  documentId: ID!
  name: String!
  slug: String!
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PlatformEntityResponseCollection {
  nodes: [Platform!]!
  pageInfo: Pagination!
}

type PlatformRelationResponseCollection {
  nodes: [Platform!]!
}

input PublisherFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PublisherFiltersInput]
  or: [PublisherFiltersInput]
  not: PublisherFiltersInput
}

input PublisherInput {
  name: String
  slug: String
  games: [ID]
  publishedAt: DateTime
}

type Publisher {
  documentId: ID!
  name: String!
  slug: String!
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PublisherEntityResponseCollection {
  nodes: [Publisher!]!
  pageInfo: Pagination!
}

input RecommendedInput {
  section: ComponentPagePopularGamesInput
  publishedAt: DateTime
}

type Recommended {
  documentId: ID!
  section: ComponentPagePopularGames!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

input WishlistFiltersInput {
  documentId: IDFilterInput
  user: UsersPermissionsUserFiltersInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [WishlistFiltersInput]
  or: [WishlistFiltersInput]
  not: WishlistFiltersInput
}

input WishlistInput {
  user: ID
  games: [ID]
  publishedAt: DateTime
}

type Wishlist {
  documentId: ID!
  user: UsersPermissionsUser
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type WishlistEntityResponse {
  data: Wishlist
}

type WishlistEntityResponseCollection {
  nodes: [Wishlist!]!
  pageInfo: Pagination!
}

union GenericMorph = ComponentPageSection | ComponentPageRibbon | ComponentPagePopularGames | ComponentPageHighlight | ComponentPageButton | UploadFile | I18NLocale | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Banner | Category | Developer | Game | Home | Order | Platform | Publisher | Recommended | Wishlist

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type UsersPermissionsMe {
  id: ID!
  documentId: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
  uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
  i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
  i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
  reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
  reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
  reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
  reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
  reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
  reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
  usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
  usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
  usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
  usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
  banner(documentId: ID!, status: PublicationStatus = PUBLISHED): Banner
  banners_connection(filters: BannerFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): BannerEntityResponseCollection
  banners(filters: BannerFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Banner]!
  category(documentId: ID!, status: PublicationStatus = PUBLISHED): Category
  categories_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): CategoryEntityResponseCollection
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Category]!
  developer(documentId: ID!, status: PublicationStatus = PUBLISHED): Developer
  developers_connection(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): DeveloperEntityResponseCollection
  developers(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Developer]!
  game(
    documentId: ID!
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Game
  games_connection(
    filters: GameFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): GameEntityResponseCollection
  games(
    filters: GameFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): [Game]!
  home(status: PublicationStatus = PUBLISHED): Home
  order(documentId: ID!, status: PublicationStatus = PUBLISHED): Order
  orders_connection(filters: OrderFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): OrderEntityResponseCollection
  orders(filters: OrderFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Order]!
  platform(documentId: ID!, status: PublicationStatus = PUBLISHED): Platform
  platforms_connection(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): PlatformEntityResponseCollection
  platforms(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Platform]!
  publisher(documentId: ID!, status: PublicationStatus = PUBLISHED): Publisher
  publishers_connection(filters: PublisherFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): PublisherEntityResponseCollection
  publishers(filters: PublisherFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Publisher]!
  recommended(status: PublicationStatus = PUBLISHED): Recommended
  wishlist(documentId: ID!, status: PublicationStatus = PUBLISHED): Wishlist
  wishlists_connection(filters: WishlistFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): WishlistEntityResponseCollection
  wishlists(filters: WishlistFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Wishlist]!
  me: UsersPermissionsMe
  myOrders(filters: OrderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OrderEntityResponseCollection
}

type Mutation {
  createReviewWorkflowsWorkflow(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
  updateReviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
  deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
  createReviewWorkflowsWorkflowStage(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
  updateReviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
  deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
  createBanner(status: PublicationStatus = PUBLISHED, data: BannerInput!): Banner
  updateBanner(documentId: ID!, status: PublicationStatus = PUBLISHED, data: BannerInput!): Banner
  deleteBanner(documentId: ID!): DeleteMutationResponse
  createCategory(status: PublicationStatus = PUBLISHED, data: CategoryInput!): Category
  updateCategory(documentId: ID!, status: PublicationStatus = PUBLISHED, data: CategoryInput!): Category
  deleteCategory(documentId: ID!): DeleteMutationResponse
  createDeveloper(status: PublicationStatus = PUBLISHED, data: DeveloperInput!): Developer
  updateDeveloper(documentId: ID!, status: PublicationStatus = PUBLISHED, data: DeveloperInput!): Developer
  deleteDeveloper(documentId: ID!): DeleteMutationResponse
  createGame(
    status: PublicationStatus = PUBLISHED
    data: GameInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Game
  updateGame(
    documentId: ID!
    status: PublicationStatus = PUBLISHED
    data: GameInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Game
  deleteGame(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  updateHome(status: PublicationStatus = PUBLISHED, data: HomeInput!): Home
  deleteHome: DeleteMutationResponse
  createOrder(status: PublicationStatus = PUBLISHED, data: OrderInput!): Order
  updateOrder(documentId: ID!, status: PublicationStatus = PUBLISHED, data: OrderInput!): Order
  deleteOrder(documentId: ID!): DeleteMutationResponse
  createPlatform(status: PublicationStatus = PUBLISHED, data: PlatformInput!): Platform
  updatePlatform(documentId: ID!, status: PublicationStatus = PUBLISHED, data: PlatformInput!): Platform
  deletePlatform(documentId: ID!): DeleteMutationResponse
  createPublisher(status: PublicationStatus = PUBLISHED, data: PublisherInput!): Publisher
  updatePublisher(documentId: ID!, status: PublicationStatus = PUBLISHED, data: PublisherInput!): Publisher
  deletePublisher(documentId: ID!): DeleteMutationResponse
  updateRecommended(status: PublicationStatus = PUBLISHED, data: RecommendedInput!): Recommended
  deleteRecommended: DeleteMutationResponse
  createWishlist(data: WishlistInput): WishlistEntityResponse
  updateWishlist(data: WishlistInput): WishlistEntityResponse
  deleteWishlist(documentId: ID!): DeleteMutationResponse
  updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!
  deleteUploadFile(id: ID!): UploadFile

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Update an existing role"""
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Update an existing user"""
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload

  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}